//<p>ผู้แนะนำ: saintfah7@gmail.com</p>
//<p>0xfcb7d48a0826c163de65374011Dd91563CC79f29</p>
//tokenId: 4n
"use client";

import Image from "next/image";
import {  ConnectButton, MediaRenderer, TokenIcon, TokenProvider, TransactionButton, useActiveAccount, useReadContract } from "thirdweb/react";
import dprojectIcon from "@public/DFastLogo_650x600.svg";
import { client } from "../../client";
import { chain  } from "../../chain";
import { inAppWallet } from "thirdweb/wallets";
import { getContract, toEther } from "thirdweb";
import { defineChain, polygon } from "thirdweb/chains";
import { claimTo as claimERC1155, balanceOf as balanceOfERC1155 } from "thirdweb/extensions/erc1155";
import { claimTo as claimERC20, balanceOf as balanceOfERC20 } from "thirdweb/extensions/erc20";
import { contract } from "../../../../utils/contracts";
import { getContractMetadata } from "thirdweb/extensions/common";
import TokenDFast from "@/app/components/TokenfDFast";

export default function Refferrer() {
    const account = useActiveAccount();

    // const { data: nftMetadata } = useReadContract(
    //     getContractMetadata,
    //     {
    //       contract: contract,
    //     }
    //   );

    //   function NFTMetadata() {
    //     return(
    //         <div className="flex flex-col items-center justify-center p-5 m-5 border border-[#333] rounded-lg">
    //             {nftMetadata && (

    //                 <div>
    //                 <MediaRenderer
    //                   client={client}
    //                   src={nftMetadata.image}
    //                   style={{
    //                     borderRadius: "8px",
    //                   }}
    //                 />
    //                 </div>
    //             )}
    //     </div>
    //     );
    //   }

    return (
        <main className="p-4 pb-10 min-h-[100vh] flex flex-col items-center">
            <div className="flex flex-col items-center justify-center p-5 m-5 border border-[#333] rounded-lg">
                <Header />
                <div className="flex flex-col items-center mb-6">
                    <ClaimButtons walletAddress={account?.address || ""}/>
                </div>
            </div>
            {/* <div><MyNFTs /></div> */}
            <div className="flex flex-col items-center">
                    <a 
                        className="flex flex-col mt-8 border border-zinc-500 px-4 py-3 rounded-lg hover:bg-zinc-800 transition-colors hover:border-zinc-800"
                        href="/assets/">ดูรายการทรัพย์สิน</a>
            </div>
        </main>
    )
    
}

function  Header() {
    return (
        <header className="flex flex-col items-center mb-20 mb:mb-20">
            <Image
                src={dprojectIcon}
                alt=""
                className="mb-4 size-[100px] md:size-[100px]"
                style={{
                    filter: "drop-shadow(0px 0px 24px #a726a9a8"
                }}
            />

            <h1 className="p-4 text-1xl md:text-4xl font-semibold md:font-bold tracking-tighter">
               สมัครใช้งาน
            </h1>
            <p>ผู้แนะนำ: saintfah7@gmail.com</p>
            <p>0xfcb7d48a0826c163de65374011Dd91563CC79f29</p>
            <div className="flex justify-center mt-10 mb-10">
                    <ConnectButton locale={"en_US"}
                        client={client}
                        chain={chain}
                        wallets={[ inAppWallet ({
                        auth: {
                            options: [
                                "email",
                            ]
                        }
                        }) ]}
                    />
            </div>
            {/* <div className="flex flex-col items-center mb-6">
                    <WalletBalances walletAddress={account?.address || ""}/>
            </div> */}
        </header>
    );
}

type walletAddresssProps = {
    walletAddress?: string;
};

const ClaimButtons: React.FC<walletAddresssProps> = ({ walletAddress }) => {
    const nftContract = getContract({
        client: client,
        chain: defineChain(polygon),
        address: "0x2a61627c3457cCEA35482cAdEC698C7360fFB9F2"
    });
    const dfastContract = getContract({
        client: client,
        chain: defineChain(polygon),
        address: "0xca23b56486035e14F344d6eb591DC27274AF3F47"
    })

    return (
        <div className="flex flex-col gap-4 md:gap-8">
            <div className="flex flex-col gap-4 md:gap-8">
            <p>กดปุ่มด้านล่างเพื่อซื้อคูปอง
            ผู้ใช้งานพรีเมี่ยมของ
            แอพพลิเคชั่นก๊อกๆๆ</p>
            </div>
            <div className="flex flex-col gap-4 md:gap-8">
                <TransactionButton
                        // className="border bg-zinc-800 border-zinc-500 px-4 py-3 rounded-lg hover:bg-zinc-100 transition-colors hover:border-zinc-300"
                        transaction={() => claimERC1155({
                            contract: nftContract,
                            to: walletAddress || "",
                            tokenId: 4n,
                            quantity: 1n
                        })}
                        onTransactionConfirmed={async () => {
                            alert("ทำรายการซื้อ คูปอง 3K NFT เรียบร้อย ");
                        }}
                >ซื้อคูปอง 3K NFT</TransactionButton>
            </div>  
        </div>
    )
};

const WalletBalances: React.FC<walletAddresssProps> = ({ walletAddress }) => {

    const account = useActiveAccount();

    const { data: contractMetadata } = useReadContract(
        getContractMetadata,
        {
          contract: contract,
        }
      );

      function NFTMetadata() {
        return(
            <div className="flex flex-col items-center justify-center p-5 m-5 border border-[#333] rounded-lg">
                {contractMetadata && (

                    <div>
                    <MediaRenderer
                      client={client}
                      src={contractMetadata.image}
                      style={{
                        borderRadius: "8px",
                      }}
                    />
                    </div>
                )}
        </div>
        );
      }

    const { data: nftBalance } = useReadContract(
        balanceOfERC1155,
        {
            contract: getContract({
                client: client,
                chain: defineChain(polygon),
                address: "0x2a61627c3457cCEA35482cAdEC698C7360fFB9F2"
            }),
            owner: walletAddress || "",
            tokenId: 4n
        }
    );

    return nftBalance && nftBalance > 0 ? 
        <div className="flex flex-col items-center mb-6">
                    <WalletBalances walletAddress={account?.address || ""}/>
                    <WalletBalances walletAddress={account?.address || ""}/>
        </div> : (
        <div className="flex flex-col gap-4 md:gap-8">
            <ClaimButtons walletAddress={account?.address || ""}/>
            <div className="flex justify-center mt-10 mb-10">
                    <ConnectButton locale={"en_US"}
                        client={client}
                        chain={chain}
                        wallets={[ inAppWallet ({
                        auth: {
                            options: [
                                "email",
                            ]
                        }
                        }) ]}
                    />
            </div>  
        </div>
    );
    
    const { data: dfastBalance } = useReadContract(
        balanceOfERC20,
        {
            contract: getContract({
                client: client,
                chain: defineChain(polygon),
                address: "0xca23b56486035e14F344d6eb591DC27274AF3F47"
            }),
            address: walletAddress || ""
        }
    );
    const { data: polBalance } = useReadContract(
        balanceOfERC20,
        {
            contract: getContract({
                client: client,
                chain: defineChain(polygon),
                address: "0x0000000000000000000000000000000000001010"
            }),
            address: walletAddress || ""
        }
    );
    const { data: usdcBalance } = useReadContract(
        balanceOfERC20,
        {
            contract: getContract({
                client: client,
                chain: defineChain(polygon),
                address: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"
            }),
            address: walletAddress || ""
        }
    );
    const { data: usdtBalance } = useReadContract(
        balanceOfERC20,
        {
            contract: getContract({
                client: client,
                chain: defineChain(polygon),
                address: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F"
            }),
            address: walletAddress || ""
        }
    );

    return (
        <div style={{
            display: "flex",
            flexDirection: "column",
            width: "100%",
            alignItems: "center",
            justifyContent: "center",
            padding: "20px",
            // border: "1px solid #333",
            // borderRadius: "8px",
          }}>
            <div 
            style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                width: "100%",
                fontSize: "24px",
                justifyContent: "center",
                paddingBottom: "20px",
                // border: "1px solid #333",
                // borderRadius: "8px",
              }}
            >
                <p style={{fontSize: "24px"}}><b>รายการทรัพย์สิน</b></p>
                <p style={{fontSize: "19px"}}><b>เลขที่กระเป๋า</b></p>
                <div style={{border: "1px solid #444", background: "#222", padding: "0px 6px", margin: "6px"}}>
                <p style={{fontSize: "18px"}}>{walletAddress ? walletAddress || "" : "ยังไม่ได้เชื่อมกระเป๋า !"} </p>    
                </div>
            </div>
            <div className="flex flex-col gap-4 md:gap-8">
                <a target="_blank" href="https://opensea.io/assets/matic/0x2a61627c3457ccea35482cadec698c7360ffb9f2/4">
                <img  className="h-56 w-56 m-6" src="https://i.seadn.io/s/raw/files/495c8c0598ade9099d9361ae906d18c9.png?auto=format&dpr=1&w=1000" alt="" />
                {/* <NFTMetadata /> */}
                </a>
            </div>
            <p style={{fontSize: "24px"}}>คูปอง 3K NFT: {walletAddress ? nftBalance?.toString() : "0"} รายการ</p>
            <div className="flex flex-col justify-items-left">
                <div className="flex mt-3 gap-2 md:gap-2">
                    <TokenDFast />เหรียญ DFast: {walletAddress? 
                    new Intl.NumberFormat("en-US",{minimumFractionDigits: 2,maximumFractionDigits: 2,})
                    .format(Number(toEther(dfastBalance || 0n))): "0"}
                </div>                
                <div className="flex mt-3 gap-2 md:gap-2">
                    <img className="h-6 w-6 rounded-full mr-1" src="https://polygonscan.com/token/images/centre-usdc_32.png" />
                    เหรียญ USDC: {walletAddress ? (Number(usdcBalance) / 1_000_000).toFixed(2) : "0"}
                </div>                
                <div className="flex mt-3 gap-2 md:gap-2">
                    <img className="h-6 w-6 rounded-full mr-1" src="https://polygonscan.com/token/images/tether_32.png" />
                    เหรียญ USDT: {walletAddress ? (Number(usdtBalance) / 1_000_000).toFixed(2) : "0"}
                </div>                
                <div className="flex mt-3 gap-2 md:gap-2">
                    <img className="h-6 w-6 rounded-full mr-1" src="https://polygonscan.com/token/images/polygonmatic_new_32.png" />
                    เหรียญ POL: {walletAddress? 
                    new Intl.NumberFormat("en-US",{minimumFractionDigits: 2,maximumFractionDigits: 6,})
                    .format(Number(toEther(polBalance || 0n))): "0"}
                    {/* {walletAddress ? (Number(toEther(polBalance || 0n))).toFixed(2) : "0"} */}
                </div>
            </div>
        </div>
    )
};